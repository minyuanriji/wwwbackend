<?php
/**
 * @link:http://www.gdqijianshi.com/
 * @copyright: Copyright (c) 2020 广东七件事集团
 * 文件描述
 * Author: xuyaoxiang
 * Date: 2020/9/21
 * Time: 15:39
 */

namespace app\plugins\group_buy\forms\mall\order;

use app\core\ApiCode;
use app\forms\mall\export\OrderExport;
use app\forms\mall\order\BaseOrderForm;
use app\models\ClerkUser;
use app\models\Express;
use app\plugins\group_buy\models\Order;
use app\models\OrderDetail;
use app\models\OrderDetailExpress;
use app\models\PaymentOrder;
use app\models\PaymentOrderUnion;
use app\models\Store;
use app\models\User;
use app\plugins\group_buy\models\PluginGroupBuyActiveItem;
use app\plugins\group_buy\models\PluginGroupBuyActive;
use app\services\mall\order\OrderSendService;

class OrderForm extends BaseOrderForm
{
    public $active_status;

    public $orderModel = "app\plugins\group_buy\models\Order";


    public function rules()
    {
        $rules = [
            [['active_status'],'integer']
        ];
        return array_merge(parent::rules(), $rules); // TODO: Change the autogenerated stub
    }

    protected function where()
    {
        /** @var Order $model */
        $model = $this->orderModel;
        $query = $model::find()->alias('o')->where([
            'o.mall_id'   => \Yii::$app->mall->id,
            'o.is_delete' => 0
        ])->leftJoin(['u' => User::tableName()], 'u.id = o.user_id')
            ->leftJoin(['active_item' => PluginGroupBuyActiveItem::tableName()], 'active_item.order_id = o.id')
            ->leftJoin(['active' => PluginGroupBuyActive::tableName()], 'active_item.active_id = active.id');

        if (!$this->app_clerk && !$this->clerk_id) {
            if (\Yii::$app->admin->identity->mch_id > 0) {
                $query->andWhere(['o.mch_id' => \Yii::$app->admin->identity->mch_id]);
            } else {
                if ($this->is_mch) {
                    $query->andWhere(['>', 'o.mch_id', 0]);
                } else {
                    $query->andWhere(['o.mch_id' => 0]);
                }
            }
        }

        $query->keyword($this->platform, ['u.platform' => $this->platform]);

        //$query->keyword($this->status == -1, ['AND', ['o.is_recycle' => 0], ['not', ['o.cancel_status' => 1]]])
        $query->keyword($this->status == 0, [
            'AND',
            ['o.is_pay' => 0, 'o.is_recycle' => 0],
            ['not', ['o.pay_type' => 2]],
            ['not', ['o.cancel_status' => 1]],
            ['o.is_send' => 0],
            ['o.sale_status' => 0],
        ])
            ->keyword($this->status == 1, [
                'AND',
                ['o.is_recycle' => 0, 'o.is_send' => 0],
                ['or', ['o.is_pay' => 1], ['o.pay_type' => 2]],
                ['o.cancel_status' => 0],
                ['o.sale_status' => 0],
            ])
            ->keyword($this->status == 2, [
                'AND',
                ['o.is_send' => 1, 'o.is_confirm' => 0, 'o.is_recycle' => 0],
                ['or', ['o.is_pay' => 1], ['o.pay_type' => 2]],
                ['not', ['o.cancel_status' => 1]],
                ['o.sale_status' => 0],
            ])
            ->keyword($this->status == 3, [
                'AND',
                ['o.is_send' => 1, 'o.is_confirm' => 1, 'o.is_recycle' => 0],
                ['or', ['o.is_pay' => 1], ['o.pay_type' => 2]],
                ['not', ['o.cancel_status' => 1]],
                ['o.sale_status' => 0],
                ['o.is_sale' => 1],
            ])
            ->keyword($this->status == 4, [
                'AND',
                ['o.cancel_status' => 2, 'o.is_recycle' => 0],
                ['o.sale_status' => 0],
            ])
            ->keyword($this->status == 5, ['o.is_recycle' => 0, 'o.cancel_status' => 1])
            ->keyword($this->status == 7, ['o.is_recycle' => 1])->keyword($this->sign, ['o.sign' => $this->sign])
            ->keyword($this->status == 8, [
                'AND',
                ['o.is_recycle' => 0, 'o.is_send' => 0],
                ['o.cancel_status' => 0]
            ]);


        ////////////////

        if ($this->user_id) {
            $query->andWhere(['o.user_id' => $this->user_id]);
        }
        if ($this->clerk_id) {
            $query->andWhere(['in', 'o.clerk_id', $this->clerk_id]);
        }
        //手机端取当前用户对应门店订单
        if ($this->app_clerk) {
            $clerk_info = ClerkUser::find()->andWhere(['user_id' => \Yii::$app->admin->id, 'is_delete' => 0])->with('store')->asArray()->all();
            if (!empty($clerk_info)) {
                $arr = [];
                foreach ($clerk_info as $item) {
                    $arr[] = $item['store'][0]['id'];
                }
                if (!empty($arr)) {
                    $query->andWhere(['in', 'o.store_id', $arr]);
                }
            }
        }

        if ($this->store_id) {
            $query->andWhere(['o.store_id' => $this->store_id]);
        }

        if ($this->date_start) {
            $query->andWhere(['>=', 'o.created_at', $this->date_start]);
        }

        if ($this->date_end) {
            $query->andWhere(['<=', 'o.created_at', $this->date_end]);
        }

        if ($this->send_type != -1) {
            $query->andWhere(['o.send_type' => $this->send_type]);
        }

        if ($this->is_clerk == 1) {
            $query->andWhere(['>', 'o.clerk_id', 0]);
        }
        if ($this->is_clerk == 2) {
            $query->andWhere(['o.clerk_id' => 0]);
        }
        if ($this->plugin) {
            if ($this->plugin == 'all') {

            } elseif ($this->plugin == 'mall') {
                $query->andWhere(['o.sign' => '']);
            } else {
                $query->andWhere(['o.sign' => $this->plugin]);
            }
        }

        if ($this->keyword) {
            switch ($this->keyword_1) {
                case 1:
                    $query->andWhere(['like', 'o.order_no', $this->keyword]);
                    break;
                case 2:
                    $query->andWhere(['like', 'u.nickname', $this->keyword]);
                    break;
                case 3:
                    $query->andWhere(['like', 'o.name', $this->keyword]);
                    break;
                case 4:
                    $query->andWhere(['u.id' => $this->keyword]);
                    break;
                case 5:
                    $query->andWhere(['exists', (OrderDetail::find()->alias('od')
                        ->innerJoinWith(['goodsWarehouse gw' => function ($query1) {
                            $query1->where(['like', 'gw.name', $this->keyword]);
                        }])->where("o.id = od.order_id"))]);
                    break;
                case 6:
                    $query->andWhere(['like', 'o.mobile', $this->keyword]);
                    break;
                case 7:
                    // 门店搜索
                    $storeIds = Store::find()->where(['mall_id' => \Yii::$app->mall->id, 'is_delete' => 0])
                        ->andWhere(['like', 'name', $this->keyword])->select('id')->asArray()->all();
                    $arr      = [];
                    foreach ($storeIds as $storeId) {
                        $arr[] = $storeId['id'];
                    }
                    $query->andWhere(['in', 'o.store_id', $arr]);
                    break;
                case 8:
                    // 门店搜索
                    $storeIds = Store::find()->where(['mall_id' => \Yii::$app->mall->id, 'is_delete' => 0])
                        ->andWhere(['like', 'name', $this->keyword])->select('id')->asArray()->all();
                    $arr      = [];
                    foreach ($storeIds as $storeId) {
                        $arr[] = $storeId['id'];
                    }
                    $query->andWhere(['or', ['in', 'o.store_id', $arr], ['like', 'o.order_no', $this->keyword],
                                      ['exists', (OrderDetail::find()->alias('od')
                                          ->innerJoinWith(['goodsWarehouse gw' => function ($query1) {
                                              $query1->where(['like', 'gw.name', $this->keyword]);
                                          }])->where("o.id = od.order_id"))]]);
                    break;
                case 9:
                    // 商户支付订单号
                    /** @var PaymentOrderUnion $paymentOrderUnion */
                    $paymentOrderUnion = PaymentOrderUnion::find()->where(['order_no' => $this->keyword])->with('paymentOrder')->one();
                    $orderNos          = [];
                    if ($paymentOrderUnion) {
                        /** @var PaymentOrder $item */
                        foreach ($paymentOrderUnion->paymentOrder as $item) {
                            $orderNos[] = $item->order_no;
                        }
                    }
                    $query->andWhere(['order_no' => $orderNos]);
                    break;
                // 商户名称搜索
                case 'mch_name':
                    $mchIds = Store::find()->where(['like', 'name', $this->keyword])
                        ->andWhere(['>', 'mch_id', 0])->select('mch_id');
                    $query->andWhere(['o.mch_id' => $mchIds]);
                    break;
                // 商品货号搜索
                case 'goods_no':
                    $orderIds = OrderDetail::find()->alias('od')->andWhere(['like', 'goods_no', $this->keyword])->select('od.order_id');
                    $query->andWhere(['o.id' => $orderIds]);
                    break;
                case 'advance_no':
                    $query->rightJoin(['ad' => AdvanceOrder::tableName()], "o.`id` = ad.`order_id` and ad.`advance_no` like '%{$this->keyword}%'");
                    break;
                default:
                    // 门店搜索
                    $storeIds = Store::find()->where(['mall_id' => \Yii::$app->mall->id, 'is_delete' => 0])
                        ->andWhere(['like', 'name', $this->keyword])->select('id')->asArray()->all();
                    $arr      = [];
                    foreach ($storeIds as $storeId) {
                        $arr[] = $storeId['id'];
                    }
                    $query->andWhere(['or', ['like', 'o.order_no', $this->keyword], ['like', 'o.name', $this->keyword],
                                      ['like', 'o.mobile', $this->keyword], ['like', 'u.nickname', $this->keyword], ['in', 'o.store_id', $arr],
                                      ['exists', (OrderDetail::find()->alias('od')
                                          ->innerJoinWith(['goodsWarehouse gw' => function ($query1) {
                                              $query1->where(['like', 'gw.name', $this->keyword]);
                                          }])->where("o.id = od.order_id"))]]);
            }

        }

        return $query;
    }

    public function search()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $query = $this->where();
        $query->andWhere(['sign' => 'group_buy']);

        if (is_numeric($this->active_status)) {
            $query->andWhere(['active.status' => $this->active_status]);
        }

        if ($this->flag == "EXPORT") {
            $new_query = clone $query;
            $this->export($new_query);
            return false;
        }

        $this->getQuery($query);

        if (($this->app_clerk && $this->is_clerk == 1) || $this->clerk_id) {
            $this->order_by = 'confirm_at desc,';
        }
        // 自定义条件
        $query->andWhere($this->getExtraWhere());

        $list = $query->page($pagination)
            ->orderBy($this->order_by . 'o.created_at DESC')
            ->select(['o.*', 'u.nickname'])
            ->with(['detail.refund', 'detail.goods.goodsWarehouse'])
            ->with('detail.expressRelation')
            ->with('clerk', 'detailExpressRelation')
            ->with('user')
            ->with('store', 'expressSingle')
            ->with('detailExpress.expressRelation.orderDetail.expressRelation')
            ->with('detailExpress.expressSingle')
            ->with('activeItem')
            ->with('active')
            ->asArray()
            ->all();


        $order = new Order();
        foreach ($list as &$item) {
            $item['platform'] = $item['user']['platform'];
            //插件名称
            if ($item['sign'] == 'group_buy' && $item['mch_id'] == 0) {
                $item['plugin_name'] = '拼团';
            }

            // 控制页面商家物流留言是否显示
            $isShowMerchantRemark = false;
            /** @var OrderDetailExpress $detailExpress */
            foreach ($item['detailExpress'] as &$detailExpress) {
                if ($detailExpress['merchant_remark']) {
                    $isShowMerchantRemark = true;
                }
                foreach ($detailExpress['expressRelation'] as &$expressRelation) {
                    $expressRelation['orderDetail']['goods_info'] = \Yii::$app->serializer->decode($expressRelation['orderDetail']['goods_info']);
                }
                unset($detailExpress);
            }
            $item['is_show_merchant_remark'] = $isShowMerchantRemark;
            unset($detailExpress);

            $item['order_form'] = json_decode($item['order_form'], true);
            foreach ($item['detail'] as $key => &$detail) {
                $goods_info                        = \Yii::$app->serializer->decode($detail['goods_info']);
                $item['detail'][$key]['attr_list'] = $goods_info['attr_list'];


                $detail['goods_info']                  = \Yii::$app->serializer->decode($detail['goods_info']);

                //插件名称
                $detail['plugin_name'] = '拼团';

                //订单详情发货状态
                $OrderSendDetail     = new OrderSendService();
                $detail['cant_send'] = intval(!$OrderSendDetail->getOrderDetailSend(OrderDetail::findOne($detail['id'])));
            }

            //发货按钮显示
            $OrderSendService   = new OrderSendService();
            $this->is_send_show = $OrderSendService->getOrderSendStatus(\app\models\Order::findOne($item['id']));

            // 控制订单操作 是否显示(例如拼团)
            $item['is_send_show']    = $this->is_send_show;
            $item['is_cancel_show']  = $this->is_cancel_show;
            $item['is_clerk_show']   = $this->is_clerk_show;
            $item['is_confirm_show'] = $this->is_confirm_show;

            if (\Yii::$app->admin->identity->mch_id > 0) {
                $isTrue                  = $this->getIsConfirmOrder();
                $item['is_confirm_show'] = $isTrue ? 1 : 0;
            }

            // 自定义额外数据
            $item['extra'] = $this->getExtra($item);

            $plugins             = \Yii::$app->role->getPluginList();
            $item['plugin_data'] = [];
            foreach ($plugins as $key => $plugin) {
                if (($key == $item['sign'] || $key == 'vip_card') && method_exists($plugin, 'getOrderInfo')) {
                    $pluginDataList = $plugin->getOrderInfo($item['id']);
                    foreach ($pluginDataList as $pKey => $pItem) {
                        $item['plugin_data'][$pKey] = $pItem;
                    }
                }
            }
            // 订单操作状态
            $item['action_status'] = $order->getOrderActionStatus($item);
            // 电子面单列表
            $item['new_express_single'] = $order->getExpressSingleList($item);
            $item["created_at"]         = date("Y-m-d H:i:s", $item["created_at"]);
        }

      //  $menuList = \Yii::$app->role->getDistributionMenu();
       // array_unshift($menuList, ['sign' => 'all', 'name' => '全部订单']);
        $list = $this->handleExtraData($list);

        return [
            'code' => ApiCode::CODE_SUCCESS,
            'data' => [
                'pagination'   => $pagination,
                'list'         => $list,
                'express_list' => Express::getExpressList(),
                'export_list'  => $this->getFieldsList(),
                'plugins'      => []
            ]
        ];
    }

    protected function export($query)
    {
        $exp = new OrderExport();
        if (!empty($this->fields)) {
            $this->fields = explode(",", $this->fields);
        } else {
            $this->fields = [];
        }
        $exp->fieldsKeyList = $this->fields;
        $exp->send_type     = $this->send_type;
        $exp->export($query);
    }
}