<?php
/**
 * @link:http://www.gdqijianshi.com/
 * @copyright: Copyright (c) 2020 广东七件事集团
 * 名片接口处理类
 * Author: zal
 * Date: 2020-07-06
 * Time: 14:30
 */

namespace app\plugins\business_card\forms\api;

use app\core\ApiCode;
use app\forms\common\tag\TagCommon;
use app\helpers\SerializeHelper;
use app\logic\CommonLogic;
use app\logic\UserLogic;
use app\models\BaseModel;
use app\models\ObjectTag;
use app\models\User;
use app\plugins\business_card\forms\common\BusinessCardAuthCommon;
use app\plugins\business_card\forms\common\BusinessCardTrackLogCommon;
use app\plugins\business_card\forms\common\Common;
use app\plugins\business_card\models\BusinessCard;
use app\plugins\business_card\models\BusinessCardCustomer;
use app\plugins\business_card\models\BusinessCardCustomerLog;
use app\plugins\business_card\models\BusinessCardDepartment;
use app\plugins\business_card\models\BusinessCardPosition;
use app\plugins\business_card\models\BusinessCardSetting;
use app\plugins\business_card\models\BusinessCardTrackLog;
use app\plugins\business_card\models\BusinessCardTrackStat;
use app\validators\EmailValidator;
use app\validators\PhoneNumberValidator;


class BusinessCardForm extends BaseModel
{
    public $page = 1;
    public $limit = 10;

    public $num = 1;
    public $keywords;
    public $time_type;
    private $msg;

    /**
     * head_img,full_name,position,mobile,email,wechat_qrcode,address,landline,introduction,images,videos
     * @var array
     */
    public $form_data;
    public $id;
    public $card_token;

    public function rules()
    {
        return [
            [['limit'], 'default', 'value' => 10],
            [['page', 'limit','id','num','time_type'], 'integer'],
            [['keywords'], 'string']
        ]; // TODO: Change the autogenerated stub
    }

    /**
     * 我的名片中心
     * @return array
     */
    public function getMyBusinessCardIndex(){
        $params = $returnData = [];
        $params = Common::selectTimeRange($params,$this->time_type);
        $params["return_count"] = 1;
        $userId = \Yii::$app->user->id;
        $returnData = Common::getBusinecardInfo(1);
        $userIds = UserLogic::getAllChildIdsList();
        $returnData = Common::getRadarStatInfo($returnData,$params,$userId,$userIds);

        //统计新增客户数
        $params["operate_id"] = $userId;
        $fields = ['count(id) as total','track_type'];
        $newClientTotal = BusinessCardCustomer::getData($params,$fields);
        $returnData["new_client_total"] = intval($newClientTotal);

        //统计浏览量
        $params["user_id"] = $userId;
        $params["track_type"] = array_keys(BusinessCardTrackStat::$interests);
        $browseTotal = BusinessCardTrackLog::getData($params);
        $returnData["browse_total"] = intval($browseTotal);

        unset($params["track_type"]);
        //新增线索
        $params["log_type"] = BusinessCardCustomerLog::LOG_TYPE_NEW_CLUE;
        $newClueTotal = BusinessCardCustomerLog::getData($params);
        $returnData["new_clue_total"] = intval($newClueTotal);

        //订单数
        $childList = UserLogic::getAllChildIdsList();
        $params["is_pay"] = 1;
        $orderStatData = UserLogic::getUserTeamOrderStatInfo($childList,$params);
        $teamOrderCount = intval($orderStatData["team_order_count"]);
        $returnData["team_order_count"] = $teamOrderCount;
        //下单总额
        $teamOrderTotal = intval($orderStatData["team_order_total"]);
        $returnData["team_order_total"] = $teamOrderTotal;

        //下单人数
        $orderUserNum = UserLogic::getUseTeamOrderPeopleTotal($childList,$params);
        $returnData["order_user_total"] = intval($orderUserNum);
        unset($params["is_pay"]);
        //意向客户
        $params["user_type"] = BusinessCardCustomer::USER_TYPE_INTENT;
        $intentTotal = BusinessCardCustomer::getData($params);
        $returnData["intent_total"] = intval($intentTotal);

        //比较客户
        $params["user_type"] = BusinessCardCustomer::USER_TYPE_COMPARE;
        $compareTotal = BusinessCardCustomer::getData($params);
        $returnData["compare_total"] = intval($compareTotal);

        //待成交客户
        $params["user_type"] = BusinessCardCustomer::USER_TYPE_WAIT_CLINCH;
        $clinchTotal = BusinessCardCustomer::getData($params);
        $returnData["clinch_total"] = intval($clinchTotal);

        $hotParams = [];
        $filterTimeStart = date("Y-m-d 00:00:00");
        $filterTimeEnd = date("Y-m-d 23:59:59");
        $hotParams["filter_time_start"] = strtotime($filterTimeStart);
        $hotParams["filter_time_end"] = strtotime($filterTimeEnd);
        $hotParams["limit"] = $this->limit;
        $hotParams["page"] = $this->page;
        $hotParams["status"] = BusinessCardCustomer::STATUS_NEW_CLUE;
        $hotParams["operate_id"] = $userId;
        $hotParams["user"] = 1;
        $newClueList = BusinessCardCustomer::getData($hotParams,["id","user_id","updated_at","basic_info"]);
        foreach ($newClueList["list"] as &$value){
            $basicInfo = json_decode($value["basic_info"],true);
            $mobile = !empty($basicInfo) && !empty($basicInfo["mobile"]) ? $basicInfo["mobile"] : $value["user"]["mobile"];
            $value["user_data"]["user_id"] = $value["user_id"];
            $value["user_data"]["nickname"] = !empty($value["user"]["nickname"]) ? $value["user"]["nickname"] : $value["user"]["mobile"];
            $value["user_data"]["avatar_url"] = $value["user"]["avatar_url"];
            $value["user_data"]["mobile"] = $mobile;
            $value["time"] = CommonLogic::beforeTime($value["updated_at"]);
            unset($value["updated_at"],$value["user"],$value["basic_info"]);
        }
        $newClueList["pagination"] = $this->getPaginationInfo($newClueList["pagination"]);
        $returnData["new_clue_list"] = $newClueList;
        return $this->returnApiResultData(ApiCode::CODE_SUCCESS, "", $returnData);
    }

    /**
     * 获取列表
     * @return array
     */
    public function getList()
    {
        $params = $returnData = [];
        $params["mall_id"] = \Yii::$app->mall->id;
        if(!empty($this->keywords)){
            $params["keywords"] = $this->keywords;
        }

        $params["not_user_id"] = \Yii::$app->user->id;
        $params["limit"] = $this->limit;
        $params["page"] = $this->page;
        $fields = ['id','head_img','user_id','full_name','position_id','department_id','email','mobile','wechat_qrcode','company_name','created_at'];
        $list = BusinessCard::getData($params,$fields);
        $businessCardSetting = BusinessCardSetting::getData(\Yii::$app->mall->id);
        foreach ($list["list"] as $value){
            if($value["user_id"] != \Yii::$app->user->id){
                $value["department_name"] = isset($value["department"]["name"]) ? $value["department"]["name"] : "";
                $value["position_name"] = isset($value["position"]["name"]) ? $value["position"]["name"] : "";
                $value["company_name"] = isset($businessCardSetting[BusinessCardSetting::COMPANY_NAME]) ? $businessCardSetting[BusinessCardSetting::COMPANY_NAME] : "";
                $value["company_address"] = isset($businessCardSetting[BusinessCardSetting::COMPANY_ADDRESS]) ? $businessCardSetting[BusinessCardSetting::COMPANY_ADDRESS] : "";
                if(isset($value["department"])){
                    unset($value["department"]);
                }
                if(isset($value["position"])){
                    unset($value["position"]);
                }
                $value["created_at"] = date("Y-m-d H:i:s",$value["created_at"]);
                $returnData[] = $value;
            }
        }
        $list["list"] = $returnData;
        $list["pagination"] = $this->getPaginationInfo($list["pagination"]);
        return $this->returnApiResultData(ApiCode::CODE_SUCCESS, "", $list);
    }

    /**
     * 创建
     * @return array
     */
    public function create(){
        if(!$this->checkParamIsLegitimate()){
            return $this->returnApiResultData(ApiCode::CODE_FAIL,$this->msg);
        }
        $isExist = BusinessCard::getData(["user_id" => \Yii::$app->user->identity->id,"is_delete" => BusinessCard::IS_DELETE_NO,"return_count" => 1]);
        if(!empty($isExist)){
            return $this->returnApiResultData(ApiCode::CODE_FAIL,"名片已经存在");
        }
        $transaction = \Yii::$app->db->beginTransaction();
        try{
            $businessCardSetting = BusinessCardSetting::getData(\Yii::$app->mall->id);
            $this->form_data["user_id"] = \Yii::$app->user->id;
            $this->form_data["mall_id"] = \Yii::$app->mall->id;
            $this->form_data["status"] = BusinessCard::STATUS_ON;
            $this->form_data["company_name"] = isset($businessCardSetting[BusinessCardSetting::COMPANY_NAME]) ? $businessCardSetting[BusinessCardSetting::COMPANY_NAME] : "";
            $this->form_data["company_address"] = isset($businessCardSetting[BusinessCardSetting::COMPANY_ADDRESS]) ? $businessCardSetting[BusinessCardSetting::COMPANY_ADDRESS] : "";
            $images = isset($this->form_data["images"]) && is_array($this->form_data["images"]) ? json_encode($this->form_data["images"]) : $this->form_data["images"];
            if(isset($this->form_data["image"]) && is_array($this->form_data["image"])){
                $this->form_data["images"] = json_encode($this->form_data["image"]);
            }
            $this->form_data["images"] = $images;
            $result = BusinessCard::operateData($this->form_data);
            if ($result !== false) {
                //同时新增一条名片权限记录
                $authResult = BusinessCardAuthCommon::addData(\Yii::$app->user->id,\Yii::$app->mall->id,$this->form_data["department_id"],$this->form_data["position_id"]);
                if($authResult === false){
                    throw new \Exception("创建失败!");
                }
                if(isset($this->form_data["tag"]) && !empty($this->form_data["tag"])){
                    $this->addTag($this->form_data["tag"],$result);
                }
            } else {
                throw new \Exception("创建失败");
            }
            $transaction->commit();
            return $this->returnApiResultData(ApiCode::CODE_SUCCESS,"创建成功",["id" => $result]);
        }catch (\Exception $ex){
            $transaction->rollBack();
            return $this->returnApiResultData(ApiCode::CODE_FAIL,CommonLogic::getExceptionMessage($ex));
        }
    }

    /**
     * 编辑详情
     * @return array
     */
    public function editDetail(){
        $params = $returnData = [];
        $departmentList = BusinessCardDepartment::getData(["mall_id" => \Yii::$app->mall->id,"is_delete" => BusinessCardPosition::NO]);
        $positionList = BusinessCardPosition::getData(["mall_id" => \Yii::$app->mall->id,"is_delete" => BusinessCardPosition::NO]);
        $businessCardSetting = BusinessCardSetting::getData(\Yii::$app->mall->id);
        $departmentId = 0;
        $positionId = 0;
        //id空为创建
        if(empty($this->id)){
            if($this->card_token !== $businessCardSetting[BusinessCardSetting::CARD_TOKEN]){
                return $this->returnApiResultData(ApiCode::CODE_FAIL,"命令错误");
            }
            $detail = Common::getBusinecardInfo();
            if(empty($detail)){
                $businessCardSetting["department_list"] = $departmentList;
                $businessCardSetting["position_list"] = $positionList;
                //查询用户权限数据中的部门和职位id
                $cardAuths = BusinessCardAuthCommon::getBusinessCardAuthIdentity(\Yii::$app->user->id,["id","department_id","user_id","position_id"]);
                if(!empty($cardAuths)){
                    $departmentId = intval($cardAuths["department_id"]);
                    $positionId = intval($cardAuths["position_id"]);
                }
                $businessCardSetting["department_id"] = $departmentId;
                $businessCardSetting["position_id"] = $positionId;
                unset($businessCardSetting["card_token"]);
                return $this->returnApiResultData(ApiCode::CODE_SUCCESS,"",$businessCardSetting);
            }
        }else{
            $params["id"] = $this->id;
            $detail = BusinessCard::getData($params);
        }
        //编辑
        if(empty($detail)){
            return $this->returnApiResultData(ApiCode::CODE_FAIL,"数据不存在");
        }
        if(!empty($detail["images"])){
            $detail["images"] = json_decode($detail["images"],true);
        }else{
            $detail["images"] = null;
        }
        $detail["company_logo"] = isset($businessCardSetting[BusinessCardSetting::COMPANY_LOGO]) ? $businessCardSetting[BusinessCardSetting::COMPANY_LOGO] : "";
        $detail["company_img"] = isset($businessCardSetting[BusinessCardSetting::COMPANY_IMG]) && !empty($businessCardSetting[BusinessCardSetting::COMPANY_IMG])?
            SerializeHelper::decode($businessCardSetting[BusinessCardSetting::COMPANY_IMG]) : [];
        $detail["created_at"] = date("Y-m-d H:i:s",$detail["created_at"]);
        unset($detail["updated_at"],$detail["is_delete"],$detail["deleted_at"]);
        //获取名片标签
        $detail = Common::getBusinessCardTag($detail,1);
        $detail["department_list"] = $departmentList;
        $detail["position_list"] = $positionList;
        return $this->returnApiResultData(ApiCode::CODE_SUCCESS,"",$detail);
    }

    /**
     * 我的名片
     * @param int $from 来源1前台2后台
     * @return array
     */
    public function my($from = 1){
        $params = [];
        //没有传名片id，查看的是自己的名片
        if(!empty($this->id)){
            $params["id"] = $this->id;
        }else{
            $params["user_id"] = \Yii::$app->user->id;
        }
        $params["mall_id"] = \Yii::$app->mall->id;
        $params["is_one"] = 1;
        $detail = BusinessCard::getData($params);
        if(empty($detail)){
            return $this->returnApiResultData(ApiCode::CODE_CARD_NOT_EXIST,"数据不存在");
        }
        $businessCardSetting = BusinessCardSetting::getData(\Yii::$app->mall->id);
        if(!empty($detail["images"])){
            $detail["images"] = json_decode($detail["images"],true);
        }else{
            $detail["images"] = null;
        }
        $authRole = BusinessCardAuthCommon::getBusinessCardAuthIdentity(\Yii::$app->user->id,["role_id","user_id"]);
        $detail["role_id"] = empty($authRole) ? 0 : $authRole["role_id"];
        $detail["company_logo"] = isset($businessCardSetting[BusinessCardSetting::COMPANY_LOGO]) ? $businessCardSetting[BusinessCardSetting::COMPANY_LOGO] : "";
        $detail["company_img"] = isset($businessCardSetting[BusinessCardSetting::COMPANY_IMG]) && !empty($businessCardSetting[BusinessCardSetting::COMPANY_IMG])?
                                    SerializeHelper::decode($businessCardSetting[BusinessCardSetting::COMPANY_IMG]) : [];
        $detail["created_at"] = date("Y-m-d H:i:s",$detail["created_at"]);

        if(isset($detail["user"])){
            unset($detail["user"]);
        }

        unset($detail["updated_at"],$detail["is_delete"],$detail["deleted_at"]);
        //获取名片标签
        $detail = Common::getBusinessCardTag($detail,1);
        //前台才显示
        if($from == 1){
            //添加轨迹
            BusinessCardTrackLogCommon::addTrackLog($detail["user_id"],$detail["id"],BusinessCardTrackLog::TRACK_TYPE_LOOK_CARD);
            //是否点赞
            $detail["is_like"] = Common::isLike(\Yii::$app->user->id,$this->id,"card");
        }else{
            $detail["auto_tag"] = TagCommon::getObjectTag(\Yii::$app->user->id,1,10,1);
        }
        $detail["is_auth"] = intval($detail["is_auth"]);
        $businessCardTrackLogCommon = new BusinessCardTrackLogCommon();
        $browseParams = ["track_user_id" => $detail["user_id"],"model_id" => $detail["id"],"track_type" => BusinessCardTrackLog::TRACK_TYPE_LOOK_CARD];
        $browseParams["page"] = $this->page;
        $browseParams["limit"] = $this->limit;
        $detail["browsing_history"] = $businessCardTrackLogCommon->selectTrackLog($browseParams);
        return $this->returnApiResultData(ApiCode::CODE_SUCCESS,"",$detail);
    }

    /**
     * 编辑
     * @return array
     */
    public function edit(){
        if(!$this->checkParamIsLegitimate()){
            return $this->returnApiResultData(ApiCode::CODE_FAIL,$this->msg);
        }
        $this->form_data["images"] = isset($this->form_data["images"]) && is_array($this->form_data["images"]) ? json_encode($this->form_data["images"]) : $this->form_data["images"];
        $result = BusinessCard::operateData($this->form_data);
        if ($result !== false) {
            if(isset($this->form_data["tag"]) && !empty($this->form_data["tag"])){
                $this->addTag($this->form_data["tag"],$this->form_data["id"]);
            }
            return $this->returnApiResultData(ApiCode::CODE_SUCCESS,"编辑成功");
        } else {
            return $this->returnApiResultData(ApiCode::CODE_FAIL,"名片不存在或编辑失败");
        }
    }

    /**
     * 点赞
     * @return array
     */
    public function like(){
        $data = [];
        $data["id"] = $this->id;
        $businessCard = BusinessCard::getData(["id" => $this->id]);
        if(empty($businessCard)){
            return $this->returnApiResultData(ApiCode::CODE_FAIL,"数据不存在");
        }
        //是否点赞过，缓存
        $this->num = Common::checkIsLike(\Yii::$app->user->id,$this->id,"card");
        $data["likes"] = $this->num;
        $msg = "点赞";
        if($this->num == -1){
            $msg = "取消点赞";
        }
        $result = BusinessCard::operateData($data);
        if ($result !== false) {
            //是否点赞，记录过轨迹
            $isLike = !empty(BusinessCardTrackLogCommon::isExist($businessCard["user_id"],$businessCard["id"])) ? true : false;
            if(!$isLike){
                BusinessCardTrackLogCommon::addTrackLog($businessCard["user_id"],$this->id,BusinessCardTrackLog::TRACK_TYPE_LIKE);
            }
            return $this->returnApiResultData(ApiCode::CODE_SUCCESS,$msg."成功");
        } else {
            return $this->returnApiResultData(ApiCode::CODE_FAIL,$msg."失败");
        }
    }

    /**
     * 保存通讯录
     * @return array
     */
    public function saveAddressBook(){
        $data = [];
        $data["id"] = $this->id;
        $data["likes"] = 1;
        $result = BusinessCard::operateData($data);
        if ($result !== false) {
            return $this->returnApiResultData(ApiCode::CODE_SUCCESS,"保存成功");
        } else {
            return $this->returnApiResultData(ApiCode::CODE_FAIL,"保存失败");
        }
    }

    /**
     * 检测参数是否合法
     * @return bool
     */
    private function checkParamIsLegitimate(){
        if(isset($this->form_data["email"]) && !empty($this->form_data["email"])){
            if (!EmailValidator::checkEmail($this->form_data["email"])) {
                $this->msg = "邮箱格式不正确";
                return false;
            }
        }

        if(isset($this->form_data["mobile"]) && !empty($this->form_data["mobile"])){
            $pattern = (new PhoneNumberValidator())->pattern;
            if ($this->form_data["mobile"] && !preg_match($pattern, $this->form_data["mobile"])) {
                $this->msg = "手机格式不正确";
                return false;
            }
        }else{
            $this->msg = "请输入手机号码";
            return false;
        }

        if(!isset($this->form_data["full_name"]) || empty($this->form_data["full_name"])){
            $this->msg = "请输入姓名";
            return false;
        }

        if(!isset($this->form_data["department_id"]) || empty($this->form_data["department_id"])){
            $this->msg = "请选择部门";
            return false;
        }

        if(!isset($this->form_data["position_id"]) || empty($this->form_data["position_id"])){
            $this->msg = "请选择职位";
            return false;
        }

        if(isset($this->form_data["department_id"]) && !empty($this->form_data["department_id"])){
            $result = BusinessCardDepartment::getData(["id" => $this->form_data["department_id"]]);
            if(empty($result)){
                $this->msg = "部门不存在";
                return false;
            }
        }

        if(isset($this->form_data["position_id"]) && !empty($this->form_data["position_id"])){
            $result = BusinessCardPosition::getData(["id" => $this->form_data["position_id"]]);
            if(empty($result)){
                $this->msg = "职位不存在";
                return false;
            }
        }

        return true;
    }

    /**
     * 添加标签
     * @param $tags
     * @param $bcid
     * @return array
     */
    private function addTag($tags,$bcid){
        foreach ($tags as $value){
            $form = new BusinessCardTagForm();
            if(isset($value["id"])){
                $form->id = $value["id"];
                $form->delTag();
            }else{
                $form->bcid = $bcid;
                $form->name = $value["name"];
                $form->add();
            }
        }
    }
}