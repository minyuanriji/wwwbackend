<?php

namespace app\models;

use app\events\CommonOrderEvent;
use app\events\UserInfoEvent;
use app\handlers\HandlerRegister;
use app\logic\CommonLogic;
use Yii;

/**
 * This is the model class for table "{{%common_order}}".
 *
 * @property int $id
 * @property int $mall_id
 * @property int $order_id
 * @property int $user_id
 * @property int $created_at
 * @property int $deleted_at
 * @property int $updated_at
 * @property int $is_delete
 * @property int $is_pay
 * @property int $status 对应Order的status
 * @property string $order_type 订单类型
 * @property float $pay_price 支付金额
 */
class CommonOrder extends BaseActiveRecord
{
    const  COMMON_ORDER_FINISHED = 'common_order_finished';
    const  COMMON_ORDER_CHANGE = 'common_order_change';

    /** @var int 订单状态 */
    const STATUS_IS_NOT_PAY = 0;
    const STATUS_IS_PAY = 1;
    const STATUS_IS_REFUND = 2;
    const STATUS_IS_COMPLETE = 1;

    const STATUS_NORMAL = 0;
    const STATUS_INVALID = -1;
    const STATUS_COMPLETE = 1;

    /** @var string 商城订单 */
    const ORDER_TYPE_MALL_GOODS = 'mall';

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%common_order}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['mall_id', 'order_id', 'user_id', 'order_type'], 'required'],
            [['mall_id','order_id', 'user_id', 'created_at', 'deleted_at', 'updated_at', 'is_delete', 'status'], 'integer'],
            [['order_type'],'string']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'mall_id' => 'Mall ID',
            'order_id' => 'Order ID',
            'user_id' => 'User ID',
            'created_at' => 'Created At',
            'deleted_at' => 'Deleted At',
            'updated_at' => 'Updated At',
            'is_delete' => 'Is Delete',
            'is_pay' => 'Is Pay',
            'status' => '对应Order的status',
            'order_type' => '订单类型',
            'pay_price' => '支付金额',
        ];
    }

    /**
     * 更新
     * @param $updateData
     * @param $columns
     * @return int
     */
    public static function edit($updateData, $columns)
    {
        //$result = CommonOrder::updateAll($updateData, $columns);
        try{
            $orderId = $columns["order_id"];
            Yii::warning("CommonOrder edit edit order_id=".$orderId);
            $commonOrders = CommonOrder::getOneData(["order_id" => $orderId,"is_delete" => self::IS_DELETE_NO]);
            Yii::warning("CommonOrder edit edit commonOrders=".var_export($commonOrders,true));
            if(!empty($commonOrders)){
                $commonOrders->status = $updateData["status"];
                $result = $commonOrders->save();
                if($result !== false){
                    return true;
                }
            }
            return false;
        }catch (\Exception $ex){
            Yii::error("CommonOrder edit errorMsg=".CommonLogic::getExceptionMessage($ex));
            return false;
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        Yii::warning("CommonOrder afterSave start");
        Yii::warning("CommonOrder afterSave status=".$this->status);
        if ($this->status == CommonOrder::STATUS_COMPLETE) {
            Yii::warning("CommonOrder afterSave STATUS_IS_COMPLETE");
            Yii::$app->trigger(CommonOrder::COMMON_ORDER_FINISHED, new CommonOrderEvent(['common_order_id' => $this->id, 'status' => $this->status, 'mall_id' => $this->mall_id, 'user_id' => $this->user_id]));
        }
        Yii::$app->trigger(HandlerRegister::TO_USER_UPGRADE,new UserInfoEvent(['mall_id'=>$this->mall_id,'user_id'=>$this->user_id]));
        return parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    /**
     * 列表
     * @param $wheres
     * @param $type 结果方式
     * @return array|\yii\db\ActiveRecord[]
     */
    public function getList($wheres,$type = "all"){
        $query = self::find()->where(["mall_id" => $this->mall_id]);
        if(isset($wheres["user_id"])){
            $query->andWhere(["user_id" => $wheres["user_id"]]);
        }
        if(isset($wheres["more_user_id"])){
            $query->andWhere(["in","user_id" , $wheres["more_user_id"]]);
        }
        $query->andWhere(["is_delete" => self::IS_DELETE_NO]);
        if(isset($wheres["status"])){
            $query->andWhere(["status" => $wheres["status"]]);
        }
        if(isset($wheres["is_pay"])){
            $query->andWhere(["is_pay" => $wheres["is_pay"]]);
        }
        if(isset($wheres["filter_time_start"]) && isset($wheres["filter_time_end"]) && !empty($wheres["filter_time_start"]) && !empty($wheres["filter_time_end"])){
            $query->andFilterWhere(['between','created_at',$wheres["filter_time_start"], $wheres["filter_time_end"]]);
        }
        if(isset($wheres["group_by"])){
            $query->groupBy($wheres["group_by"]);
        }
        if($type == "count"){
            $list = $query->count();
        }else if($type == "sum"){
            $list = $query->sum("pay_price");
        }else{
            $list = $query->all();
        }
        return $list;
    }

    /**
     * 获取数据
     * @param $params
     * @param $fields 字段
     * @return \app\models\BaseActiveQuery|array|\yii\db\ActiveRecord|\yii\db\ActiveRecord[]|null
     */
    public static function getData($params,$fields = []){
        $returnData = [];
        $query = self::find()->where(["is_delete" => self::NO]);
        if(isset($params["id"]) && !empty($params["id"])){
            $params["is_one"] = 1;
            $query->andWhere(["id" => $params["id"]]);
        }
        if(isset($params["mall_id"]) && !empty($params["mall_id"])){
            $query->andWhere(["mall_id" => $params["mall_id"]]);
        }
        if(isset($params["user_id"]) && !empty($params["user_id"])){
            $query->andWhere(["user_id" => $params["user_id"]]);
        }
        if(isset($params["is_pay"]) && !empty($params["is_pay"])){
            $query->andWhere(["is_pay" => $params["is_pay"]]);
        }
        if(isset($params["filter_time_start"]) && isset($params["filter_time_end"]) && !empty($params["filter_time_start"]) && !empty($params["filter_time_end"])){
            $query->andFilterWhere(['between','created_at',$params["filter_time_start"], $params["filter_time_end"]]);
        }
        //排序
        $orderByColumn = isset($params["sort_key"]) ? $params["sort_key"] : "id";
        $orderByType = isset($params["sort_val"]) ? $params["sort_val"] : " desc";
        $orderBy = $orderByColumn." ".$orderByType;
        if(!empty($fields)){
            $query->select($fields);
        }
        if(isset($params["return_count"])){
            return $query->count();
        }

        if(isset($params["group_by"])){
            $query->groupBy($params["group_by"]);
        }

        $pagination = null;
        if(isset($params["limit"]) && isset($params["page"])){
            $query->page($pagination, $params['limit'], $params['page']);
        }
        if(isset($params["user"])){
            $query->with(["user"]);
        }
        $query->asArray()->orderBy($orderBy);
        if(isset($params["is_one"]) && $params["is_one"] == 1){
            $list = $query->one();
            $returnData = $list;
        }else{
            $list = $query->all();
            if(isset($params["limit"]) && isset($params["page"])) {
                $returnData["list"] = $list;
                $returnData["pagination"] = $pagination;
            }else{
                $returnData = $list;
            }
        }
        return $returnData;
    }

}
