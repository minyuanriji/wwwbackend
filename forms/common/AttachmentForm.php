<?php
/**
 * @link:http://www.gdqijianshi.com/
 * @copyright: Copyright (c) 2020 广东七件事集团
 * Created by PhpStorm
 * Author: zal
 * Date: 2020-04-09
 * Time: 17:16
 */

namespace app\forms\common;

use app\forms\admin\permission\role\SuperAdminRole;
use app\models\Admin;
use app\models\AttachmentStorage;
use app\models\BaseModel;
use app\models\CosSetting;
use app\models\Mall;
use app\models\OssSetting;
use app\models\QiniuSetting;
use app\models\UploadSetting;
use app\models\User;

/**
 * Class AttachmentForm
 * @package app\forms\common
 * @property Mall $mall
 * @property Admin $admin
 */
class AttachmentForm extends BaseModel
{
    public $mall;
    public $admin; // 当商城存在时，用户为商城所属的账户；当商城不存在是，用户为传入的用户
    protected $mall_id;
    protected $admin_id;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->setMallId($this->mall ? $this->mall->id : 0);
        if ($this->mall) {
            $this->admin = Admin::findOne(['id' => $this->mall->admin_id]);
        }
        $superAdmin = SuperAdminRole::getSuperAdmin();
        $this->setAdminId($this->admin ? $this->admin->id : $superAdmin->id);
    }

    public function setMallId($mallId)
    {
        $this->mall_id = $mallId;
    }

    public function getMallId()
    {
        return $this->mall_id;
    }

    public function setAdminId($userId)
    {
        $this->admin_id = $userId;
    }

    public function getAdminId()
    {
        return $this->admin_id;
    }

    public static function getCommon($admin = null, $mall = null)
    {
        $common = new self([
            'mall' => $mall,
            'admin' => $admin
        ]);
        return $common;
    }

    public function getStorage()
    {
        return [
            AttachmentStorage::STORAGE_TYPE_LOCAL => '本地服务器',
            AttachmentStorage::STORAGE_TYPE_ALIOSS => '阿里云OSS',
            AttachmentStorage::STORAGE_TYPE_TXCOS => '腾讯云COS',
            AttachmentStorage::STORAGE_TYPE_QINIU => '七牛云存储',
        ];
    }

    /**
     * @param $data
     * @return bool
     * @throws \Exception
     */
    public function attachmentCreateStorage($data)
    {
        $condition = [
            'type' => $data['type'],
            'mall_id' => $this->mall_id,
            'admin_id' => $this->admin_id
        ];
        if ($data['id']) {
            $condition['id'] = $data['id'];
        }
        $storage = AttachmentStorage::findOne($condition);
        if (!$data['id'] && $storage) {
            throw new \Exception('该存储位置已配置过，请选择其它存储位置。');
        } elseif ($data['id'] && !$storage) {
            throw new \Exception('配置不存在，请刷新页面重新加载内容。');
        } elseif (!$data['id']) {
            $storage = new AttachmentStorage();
        }
        $data["mall_id"] = $this->mall_id;
        $data["admin_id"] = $this->admin_id;
        $res = $this->createStorageSetting($data);
        if($res !== false){
            $storage->mall_id = $this->mall_id;
            $storage->admin_id = $this->admin_id;
            $storage->type = $data['type'];
            $storage->setting_id = intval($res);
            //$storage->config = isset($data['config']) ? \Yii::$app->serializer->encode($data['config']) : '""';
            if ($storage->isNewRecord) {
                $storage->status = 0;
            }
            if ($storage->save()) {
                return true;
            } else {
                throw new \Exception($this->responseErrorMsg($storage));
            }
        }else{
            throw new \Exception($this->responseErrorMsg($data));
        }

    }

    public function attachmentEnableStorage($id)
    {
        if ($this->mall) {
            $condition = ['mall_id' => $this->mall_id];
        } else {
            $condition = ['mall_id' => 0, 'admin_id' => $this->admin_id];
        }
        AttachmentStorage::updateAll(['status' => 0], $condition);
        $condition['id'] = $id;
        AttachmentStorage::updateAll(['status' => 1], $condition);
        return true;
    }

    /**
     * @return array|\yii\db\ActiveRecord[]
     * @throws \Exception
     * 获取指定账号指定商城的存储设置列表
     */
    public function getAttachmentList()
    {
        $auth = $this->getStorageAuth();
        if (!is_array($auth)) {
            return [];
        }
        $list = AttachmentStorage::find()
            ->where(['type' => $auth, 'mall_id' => $this->mall_id, 'admin_id' => $this->admin_id])
            ->orderBy('id DESC')->asArray()->all();
        foreach ($list as &$item) {
            $setting_id = $item["setting_id"];
            $type = $item["type"];
            $config = $this->getStorageSetting($type,$setting_id);
            $item['config'] = $config;
        }
        return $list;
    }

    /**
     * @return AttachmentStorage|null
     * @throws \Exception
     * 获取可使用的存储设置
     */
    public function getAttachment()
    {
        $storageAuth = $this->getStorageAuth();
        $superAdmin = SuperAdminRole::getSuperAdmin();
        if (is_array($storageAuth)) {
            $attachment = AttachmentStorage::findOne([
                'admin_id' => $this->admin_id, 'mall_id' => $this->mall_id, 'status' => 1, 'type' => $storageAuth
            ]);
            if (!$attachment) {
                if ($this->mall_id != 0) {
                    $attachment = AttachmentStorage::findOne([
                        'admin_id' => $this->admin_id, 'mall_id' => 0, 'status' => 1, 'type' => $storageAuth
                    ]);
                }
                if (!$attachment) {
                    $superAdmin = SuperAdminRole::getSuperAdmin();
                    if (!$this->admin_id != $superAdmin->admin_id) {
                        $attachment = AttachmentStorage::findOne([
                            'admin_id' => $superAdmin->admin_id, 'mall_id' => 0, 'status' => 1, 'type' => $storageAuth
                        ]);
                    }
                    if (!$attachment) {
                        throw new \Exception('请先配置上传设置');
                    }
                }
            }
        } else {
            $attachment = AttachmentStorage::findOne([
                'admin_id' => $superAdmin->admin_id, 'mall_id' => 0, 'status' => 1
            ]);
        }
        return $attachment;
    }

    /**
     * @return array|mixed
     * @throws \Exception
     * 获取指定账户上传权限
     */
    public function getStorageAuth()
    {
        $default = $this->getDefaultAuth();
        $admin = $this->admin;
        if (!$admin) {
            return $default;
        }
        if ($admin->admin_type == Admin::ADMIN_TYPE_SUPER) {
            return $default;
        } elseif ($admin->admin_type == Admin::ADMIN_TYPE_ADMIN) {
            if ($admin->adminInfo->is_default == 1) {
                $permission = \Yii::$app->branch->childPermission($admin->adminInfo);
            } else {
                $permission = json_decode($admin->adminInfo->permissions, true);
            }
            if (!in_array('attachment', $permission)) {
                return false;
            }
        } else {
            if (!$this->mall) {
                throw new \Exception('错误的商城信息');
            }
            $user = Admin::findOne(['id' => $this->mall->admin_id, 'is_delete' => 0]);
            if (!$user) {
                throw new \Exception('商城所属的子账号已被删除');
            }
        }
        $secondaryPermissions = json_decode($admin->adminInfo->secondary_permissions, true);
        if (!isset($secondaryPermissions['attachment'])) {
            return $default;
        }
        return $secondaryPermissions['attachment'];
    }

    public function getDefaultAuth()
    {
        return [1, 2, 3, 4];
    }

    public function getStorageType()
    {
        $auth = $this->getStorageAuth();
        if (!is_array($auth)) {
            $auth = [];
        }
        $storage = $this->getStorage();
        $storageType = [];
        foreach ($auth as $key=>$item) {
            $storageType[$item] = $storage[$item];
        }
        return $storageType;
    }

    /**
     * 获取存储配置
     * @param $type
     * @param $setting_id
     * @return CosSetting|OssSetting|QiniuSetting|array|null
     */
    private function getStorageSetting($type,$setting_id){
        $data = [];
        if($type == UploadSetting::STORAGE_TYPE_TXCOS){
            $data = CosSetting::findOne(["id" => $setting_id]);
        }
        else if($type == UploadSetting::STORAGE_TYPE_ALIOSS){
            $data = OssSetting::findOne(["id" => $setting_id]);
        }
        else if($type == UploadSetting::STORAGE_TYPE_QINIU){
            $data = QiniuSetting::findOne(["id" => $setting_id]);
        }
        return $data;
    }

    /**
     * 新增存储配置
     * @param $params
     * @return integer
     */
    private function createStorageSetting($params){
        $res = 0;
        $type = $params["type"];
        $config = isset($params["config"])?$params["config"]:[];
        if($type == AttachmentStorage::STORAGE_TYPE_TXCOS){
            /** @var CosSetting $result */
            $result = CosSetting::find()->one();
            if(empty($result)){
                $data = new CosSetting();
                $data->mall_id = $params["mall_id"];
                $data->admin_id = $params["admin_id"];
                $data->secret_id = $config["secret_id"];
                $data->secret_key = $config["secret_key"];
                $data->bucket = $config["bucket"];
                $data->created_at = time();
                $data->region = isset($config["region"])?$config["region"]:"";
                $res = $data->save();
            }else{
                $res = $result->id;
            }
        }
        else if($type == AttachmentStorage::STORAGE_TYPE_ALIOSS){
            $result = OssSetting::find()->count("id");
            if(empty($result)){
                $data = new OssSetting();
                $data->mall_id = $params["mall_id"];
                $data->admin_id = $params["admin_id"];
                $data->access_key = $config["access_key"];
                $data->access_secret = $config["secret_key"];
                $data->bucket = $config["bucket"];
                $data->end_point = $config["domain"];
                $data->style_api = $config["style_api"];
                $data->created_at = time();
                $data->is_delete = 0;
                $res = $data->save();
            }else{
                $res = $result->id;
            }
        }
        else if($type == AttachmentStorage::STORAGE_TYPE_QINIU){
            $result = QiniuSetting::find()->count("id");
            if(empty($result)){
                $data = new QiniuSetting();
                $data->mall_id = $params["mall_id"];
                $data->admin_id = $params["admin_id"];
                $data->access_key = $config["access_key"];
                $data->access_secret = $config["secret_key"];
                $data->domain = $config["domain"];
                $data->bucket = $config["bucket"];
                $data->created_at = time();
                $res = $data->save();
            }else{
                $res = $result->id;
            }
        }
        return $res;
    }

}
