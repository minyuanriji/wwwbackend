<?php
/**
 * @link:http://www.gdqijianshi.com/
 * @copyright: Copyright (c) 2020 广东七件事集团
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-05-11
 * Time: 15:38
 */

namespace app\plugins\distribution\forms\mall;


use app\core\ApiCode;
use app\models\User;
use app\plugins\distribution\forms\common\DistributionLevelCommon;
use app\plugins\distribution\models\Distribution;
use app\models\BaseModel;
use app\plugins\distribution\models\DistributionApply;

class DistributionUserEditForm extends BaseModel
{

    public $keyword;
    public $id;
    public $level;
    public $batch_ids;
    public $apply_status;
    public $apply_marks;
    public $apply_id;

    public function rules()
    {
        return [
            [['keyword'], 'trim'],
            [['keyword','apply_marks'], 'string'],
            [['id', 'level','apply_id','apply_status'], 'integer'],
            [['batch_ids'], 'safe']
        ];// TODO: Change the autogenerated stub
    }


    public function getUser()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $list = User::find()->alias('u')
            ->where(['u.is_delete' => 0, 'u.mall_id' => \Yii::$app->mall->id,])
            ->keyword($this->keyword !== '', ['like', 'u.nickname', $this->keyword])
            ->apiPage(20)->select('u.id,u.nickname')->all();
        return [
            'code' => ApiCode::CODE_SUCCESS,
            'msg' => '',
            'data' => [
                'list' => $list
            ]
        ];
    }


    public function save()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        try {
            /* @var User $user */
            $user = User::findOne(['id' => $this->id, 'is_delete' => 0]);
            if (!$user) {
                return ['code' => ApiCode::CODE_FAIL, 'msg' => '用户不存在'];
            }
            $distribution = Distribution::findOne(['user_id' => $user->id, 'is_delete' => 0]);
            if ($distribution) {
                return ['code' => ApiCode::CODE_FAIL, 'msg' => '用户已经是分销商，请勿重复提交'];
            } else {
                $distribution = new Distribution();
                $distribution->mall_id = $user->mall_id;
                $distribution->user_id = $user->id;
                $distribution->created_at = time();
            }
            $t = \Yii::$app->db->beginTransaction();
            try {
                $distribution->level = 0;
                $distribution->is_delete = 0;
                if ($this->apply_status == DistributionApply::STATUS_PASS) {
                    if ($distribution->save()) {
                        if (!$user->is_inviter) {
                            $user->is_inviter = 1;
                            $user->inviter_at = time();
                            $user->is_distributor = User::YES;
                            if (!$user->save()) {
                                throw new \Exception($this->responseErrorMsg($distribution));
                            }
                        }
                    } else {
                        throw new \Exception($this->responseErrorMsg($distribution));
                    }
                }
                if($this->apply_id){
                    $apply = DistributionApply::findOne($this->apply_id);
                    if($apply){
                        $apply->status = $this->apply_status;
                        $apply->marks = $this->apply_marks;
                        if (!$apply->save()) {
                            throw new \Exception($this->responseErrorMsg($apply));
                        }
                    }
                }
                $t->commit();
                return ['code' => ApiCode::CODE_SUCCESS, 'msg' => '保存成功'];
            } catch (\Exception $exception) {
                $t->rollBack();
                return [
                    'code' => ApiCode::CODE_SUCCESS,
                    'msg' => $exception->getMessage()
                ];
            }

        } catch (\Exception $exception) {
            return [
                'code' => ApiCode::CODE_FAIL,
                'msg' => $exception->getMessage()
            ];
        }
    }

    public function changeLevel()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        try {
            $common = DistributionLevelCommon::getInstance();
            $common->userId = $this->id;
            if ($this->level) {
                $distributionLevel = $common->getDistributionLevelByLevel($this->level);
                if (!$distributionLevel) {
                    throw new \Exception('无效的分销商等级');
                }
            } else {
                $this->level = 0;
            }
            $res = $common->changeLevel($this->level,Distribution::UPGRADE_STATUS_MANUAL);
            if ($res) {
                return [
                    'code' => ApiCode::CODE_SUCCESS,
                    'msg' => '修改成功'
                ];
            } else {
                return [
                    'code' => ApiCode::CODE_FAIL,
                    'msg' => $res
                ];
            }


        } catch (\Exception $exception) {
            return [
                'code' => ApiCode::CODE_FAIL,
                'msg' => $exception->getMessage()
            ];
        }
    }


    public function batchLevel()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        try {
            if ($this->level) {
                $common = DistributionLevelCommon::getInstance();
                $distributionLevel = $common->getDistributionLevelByLevel($this->level);
                if (!$distributionLevel) {
                    throw new \Exception('无效的分销商等级');
                }
            } else {
                $this->level = 0;
            }
            Distribution::updateAll(
                ['level' => $this->level, 'upgrade_level_at' => time()],
                ['id' => $this->batch_ids]
            );
            return [
                'code' => ApiCode::CODE_SUCCESS,
                'msg' => '修改成功'
            ];
        } catch (\Exception $exception) {
            return [
                'code' => ApiCode::CODE_FAIL,
                'msg' => $exception->getMessage()
            ];
        }
    }
}