<?php
/**
 * @link:http://www.gdqijianshi.com/
 * @copyright: Copyright (c) 2020 广东七件事集团
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-05-08
 * Time: 10:37
 */

namespace app\forms\mall\user;


use app\core\ApiCode;
use app\forms\common\UserRelationshipLinkForm;
use app\helpers\SerializeHelper;
use app\models\BaseModel;
use app\models\RelationSetting;

/**
 * Class RelationSettingForm
 * @package app\forms\mall\user
 * @Notes用户关系设置表
 */
class RelationSettingForm extends BaseModel
{
    public $use_relation;
    public $get_power_way;
    public $buy_num_selected;
    public $buy_num;
    public $buy_price_selected;
    public $buy_price;
    public $buy_goods_selected;
    public $buy_goods_way;
    public $goods_ids;
    public $cat_ids;
    public $buy_compute_way;
    public $become_child_way;
    public $protocol;
    public $notice;
    public $status_pic_url;
    public $cat_list;
    public $goods_list;
    public $cash_type;
    public $day_max_money;
    public $min_money;
    public $cash_service_fee;
    public $is_income_cash;




    public function rules()
    {
        return [
            [['use_relation', 'get_power_way', 'become_child_way'], 'required'],
            [['use_relation', 'get_power_way', 'buy_num_selected', 'buy_num', 'buy_price_selected', 'buy_goods_selected', 'buy_goods_way', 'buy_compute_way', 'become_child_way','is_income_cash'], 'integer'],
            [['buy_price', 'day_max_money', 'min_money', 'cash_service_fee'], 'number'],
            [['goods_ids', 'cat_list', 'cat_ids', 'goods_list', 'cash_type'], 'safe'],
            [['protocol', 'notice'], 'string'],
            [['status_pic_url'], 'string', 'max' => 255],
        ];// TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'use_relation' => '是否启用关系链',
            'get_power_way' => '1无条件、2、申请 3、或 4、与',
            'buy_num_selected' => '消费次数达',
            'buy_num' => '消费次数',
            'buy_price_selected' => '消费金额达',
            'buy_price' => '消费金额',
            'buy_goods_selected' => '购买商品',
            'buy_goods_way' => '1 任意商品  2 指定商品  3 指定分类',
            'goods_ids' => '指定商品的goods_warehouse_id',
            'cat_ids' => '指定分类IDs',
            'buy_compute_way' => '1、付款后 2完成后',
            'become_child_way' => '1、首次点击分享链接 2、首次下单 3、首次付款',
            'protocol' => '申请协议',
            'notice' => '用户须知',
            'status_pic_url' => '审核状态图片',
            'cat_list' => '分类列表',
            'goods_list' => '商品列表',
            'is_income_cash'=>'开启收入提现'
        ];
    }

    public function save()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        if ($this->buy_goods_selected) {
            if (!$this->buy_goods_way) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '请选择购买商品的方式！');
            }
        }
        if (!$this->buy_compute_way) {
            if ($this->buy_goods_selected || $this->buy_num_selected || $this->buy_price_selected) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '请选择结算方式！');
            }
        }

        if ($this->buy_price_selected) {
            if (!$this->buy_price) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '请输入消费金额！');
            }
        }

        if ($this->buy_num_selected) {
            if (!$this->buy_num) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '请输入消费次数！');
            }
        }
        if ($this->buy_goods_way == RelationSetting::BUY_GOODS_WAY_SELECTED_GOODS) {

            if (!$this->goods_ids) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '请选择购买的商品！');
            }

        }
        if ($this->buy_goods_way == RelationSetting::BUY_GOODS_WAY_SELECTED_CAT) {
            if (!$this->cat_ids) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '请选择商品分类！');
            }
        }
        if (in_array($this->get_power_way, [RelationSetting::GET_POWER_WAY_OR, RelationSetting::GET_POWER_WAY_AND])) {

            if (!$this->buy_goods_selected && !$this->buy_price_selected && !$this->buy_num_selected) {

                return $this->returnApiResultData(ApiCode::CODE_FAIL, '请完善获得发展下线权利条件！');
            }
        }
        if ($this->get_power_way == RelationSetting::GET_POWER_WAY_APPLY) {
            if (!$this->protocol) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '请完善申请协议！');
            }
            if (!$this->notice) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '请完善用户须知！');
            }
            if (!$this->status_pic_url) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '请选择待审核页背景图！');
            }
        }

        $relation = RelationSetting::findOne(['mall_id' => \Yii::$app->mall->id, 'is_delete' => 0]);
        if (!$relation) {
            $relation = new RelationSetting();
            $relation->mall_id = \Yii::$app->mall->id;
        }
        $relation->attributes = $this->attributes;


        $relation->goods_ids = SerializeHelper::encode($this->goods_ids);
        if ($this->goods_list) {
            $relation->goods_list = SerializeHelper::encode($this->goods_list);
        }
        if ($this->cat_list) {
            $relation->cat_list = SerializeHelper::encode($this->cat_list);
        }

        if ($this->cat_ids) {
            $relation->cat_ids = SerializeHelper::encode($this->cat_ids);
        }
        if ($this->cash_type) {
            $relation->cash_type = SerializeHelper::encode($this->cash_type);
        }
        if (!$relation->save()) {
            return $this->returnApiResultData(ApiCode::CODE_FAIL, '保存失败', ['error' => $this->responseErrorMsg($relation)]);
        }

        return $this->returnApiResultData(ApiCode::CODE_SUCCESS, '保存成功!');
    }

    public function getRelationSetting()
    {
        $relation = RelationSetting::findOne(['is_delete' => 0, 'mall_id' => \Yii::$app->mall->id]);

        if (!$relation) {
            return $this->returnApiResultData(ApiCode::CODE_FAIL, '未开启关系链设置');
        }
        if ($relation->goods_list) {
            $relation->goods_list = SerializeHelper::decode($relation->goods_list);
        } else {
            $relation->goods_list = [];
        }
        if ($relation->cat_list) {
            $relation->cat_list = SerializeHelper::decode($relation->cat_list);
        } else {
            $relation->cat_list = [];
        }
        if ($relation->cat_ids) {
            $relation->cat_ids = SerializeHelper::decode($relation->cat_ids);
        } else {
            $relation->cat_ids = [];
        }
        if ($relation->goods_ids) {
            $relation->goods_ids = SerializeHelper::decode($relation->goods_ids);
        } else {
            $relation->goods_ids = [];
        }
        if (!$relation->cash_type) {
            $relation->cash_type = [];
        } else {
            $relation->cash_type = SerializeHelper::decode($relation->cash_type);
        }

        $cacheData = \Yii::$app->getCache()->get(UserRelationshipLinkForm::REBUILD_JOB_CACHE_KEY);

        $cacheData['status'] = isset($cacheData['status']) ? (int)$cacheData['status'] : -1;
        $cacheData['error']  = isset($cacheData['error']) ? $cacheData['error'] : "";
        $cacheData['long']   = isset($cacheData['start']) ? (time() - $cacheData['start']) : "";
        $cacheData['start']  = isset($cacheData['start']) ? date("Y-m-d H:i:s", $cacheData['start']) : "";

        return $this->returnApiResultData(ApiCode::CODE_SUCCESS, '', ['relation' => $relation, 'rebuild' => $cacheData]);
    }
}