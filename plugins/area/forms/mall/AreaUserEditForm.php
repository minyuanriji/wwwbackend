<?php
/**
 * @link:http://www.gdqijianshi.com/
 * @copyright: Copyright (c) 2020 广东七件事集团
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-05-11
 * Time: 15:38
 */

namespace app\plugins\area\forms\mall;


use app\core\ApiCode;
use app\models\User;
use app\plugins\area\forms\common\AreaLevelCommon;
use app\plugins\area\models\Area;
use app\plugins\area\models\AreaAgent;
use app\plugins\area\models\AreaApply;
use app\models\BaseModel;

class AreaUserEditForm extends BaseModel
{

    public $keyword;
    public $id;
    public $level;
    public $province_id;
    public $city_id;
    public $district_id;
    public $town_id;
    public $apply_marks;
    public $apply_id;
    public $apply_status;

    public function rules()
    {
        return [
            [['keyword'], 'trim'],
            [['keyword','apply_marks'], 'string'],
            [['id', 'level', 'province_id', 'city_id', 'district_id', 'town_id','apply_id','apply_status'], 'integer'],
            [['province_id', 'city_id', 'district_id', 'town_id'], 'default', 'value' => 0],

        ];// TODO: Change the autogenerated stub
    }


    public function getUser()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $query = User::find()->alias('u')
            ->where(['u.is_delete' => 0, 'u.mall_id' => \Yii::$app->mall->id,]);
//            ->andWhere(['u.is_inviter' => 1]);
        if ($this->keyword) {
            $query->andWhere([
                'or',
                ['like', 'u.username', $this->keyword],
                ['like', 'u.mobile', $this->keyword]
            ]);
        }
        $list = $query->apiPage(20)->select('u.id,u.nickname')->all();

        return [
            'code' => ApiCode::CODE_SUCCESS,
            'msg' => '',
            'data' => [
                'list' => $list
            ]
        ];
    }


    public function save()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        try {
            /* @var User $user */
            $user = User::findOne(['id' => $this->id, 'is_delete' => 0]);
            if (!$user) {
                return ['code' => ApiCode::CODE_FAIL, 'msg' => '用户不存在'];
            }

            $area = AreaAgent::findOne([
                'mall_id'       => \Yii::$app->mall->id,
                'level'         => $this->level,
                'district_id'   => $this->district_id,
                'province_id'   => $this->province_id,
                'city_id'       => $this->city_id,
                'town_id'       => $this->town_id,
                'is_delete'     => 0
            ]);
            if ($area) {
                throw new \Exception('该区域已存在代理商uid:'. $area->user_id);
            }

            //可以多区域设置某一个用户
            /*$area = AreaAgent::findOne(['user_id' => $user->id, 'is_delete' => 0]);
            if ($area) {
                return ['code' => ApiCode::CODE_FAIL, 'msg' => '用户已经是经销商，请勿重复提交'];
            } else {*/
                $area = new AreaAgent();
                $area->mall_id = $user->mall_id;
                $area->user_id = $user->id;
                $area->created_at = time();
//            }
            $t = \Yii::$app->db->beginTransaction();
            try {
                $area->level = $this->level;
                $area->district_id = $this->district_id;
                $area->province_id = $this->province_id;
                $area->city_id = $this->city_id;
//                $area->town_id = $this->town_id;
                $area->is_delete = 0;
                if (empty($this->apply_status) || ($this->apply_status == AreaApply::STATUS_PASS)) {
                    if($area->save()){
                        if (!$user->is_inviter) {
                            $user->inviter_at = time();
                            if (!$user->save()) {
                                throw new \Exception($this->responseErrorMsg($user));
                            }
                        }
                    }else {
                        throw new \Exception($this->responseErrorMsg($area));
                    }
                }
                if($this->apply_id){
                    $apply = AreaApply::findOne($this->apply_id);
                    if($apply){
                        $apply->status = $this->apply_status;
                        $apply->marks = $this->apply_marks;
                        if (!$apply->save()) {
                            throw new \Exception($this->responseErrorMsg($apply));
                        }
                    }
                }
                $t->commit();
                return ['code' => ApiCode::CODE_SUCCESS, 'msg' => '保存成功'];
            } catch (\Exception $exception) {
                $t->rollBack();
                return [
                    'code' => ApiCode::CODE_SUCCESS,
                    'msg' => $exception->getMessage()
                ];
            }
        } catch (\Exception $exception) {
            return [
                'code' => ApiCode::CODE_FAIL,
                'msg' => $exception->getMessage()
            ];
        }
    }

    public function changeLevel()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        try {
            $common = AreaLevelCommon::getInstance();
            $common->userId = $this->id;
            $res = $common->changeLevel($this->level, AreaAgent::UPGRADE_STATUS_MANUAL, $this->province_id, $this->city_id, $this->district_id, $this->town_id);
            if ($res) {
                return [
                    'code' => ApiCode::CODE_SUCCESS,
                    'msg' => '修改成功'
                ];
            } else {
                return [
                    'code' => ApiCode::CODE_FAIL,
                    'msg' => $res
                ];
            }


        } catch (\Exception $exception) {
            return [
                'code' => ApiCode::CODE_FAIL,
                'msg' => $exception->getMessage()
            ];
        }
    }


    public function batchLevel()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        try {
            if ($this->level) {
                $common = AreaLevelCommon::getInstance();
                $areaLevel = $common->getAreaLevelByLevel($this->level);
                if (!$areaLevel) {
                    throw new \Exception('无效的经销商等级');
                }
            } else {
                $this->level = 0;
            }
            Area::updateAll(
                ['level' => $this->level, 'upgrade_level_at' => time()],
                ['id' => $this->batch_ids]
            );
            return [
                'code' => ApiCode::CODE_SUCCESS,
                'msg' => '修改成功'
            ];
        } catch (\Exception $exception) {
            return [
                'code' => ApiCode::CODE_FAIL,
                'msg' => $exception->getMessage()
            ];
        }
    }
}