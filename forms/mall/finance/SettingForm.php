<?php
/**
 * @link:http://www.gdqijianshi.com/
 * @copyright: Copyright (c) 2020 广东七件事集团
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-05-14
 * Time: 19:10
 */

namespace app\forms\mall\finance;


use app\core\ApiCode;
use app\helpers\SerializeHelper;
use app\logic\OptionLogic;
use app\models\BaseModel;
use app\models\Option;
use EasyWeChat\Kernel\Exceptions\Exception;

class SettingForm extends BaseModel
{

    public $score_status;
    public $integral_status;
    public $score_price;
    public $score_rule;
    public $balance_cash_status;
    public $balance_charge_status;
    public $balance_transfer_status;
    public $pay_password_status;
    public $wechat_mch_id;
    public $wechat_pay_secret;
    public $wechat_cert_pem;
    public $wechat_key_pem;
    public $wechat_status;
    public $wechat_app_id;
    public $balance_status;
    public $cash_type;
    public $day_max_money;
    public $min_money;
    public $cash_service_fee;
    public $is_income_cash;
    public $wechat_key_pem_path;
    public $wechat_cert_pem_path;
    public $recharge;

    public function rules()
    {
        return [
            [['score_status', 'score_price', 'balance_transfer_status', 'balance_charge_status', 'balance_cash_status', 'is_income_cash','pay_password_status','integral_status'], 'integer'],
            [['score_rule'], 'string'],
            [['cash_type','recharge'], 'safe'],
            [['day_max_money', 'cash_service_fee', 'min_money'], 'number'],
            [['wechat_status', 'balance_status'], 'integer'],
            [['wechat_mch_id', 'wechat_pay_secret'], 'string', 'max' => 32],
            [['wechat_cert_pem', 'wechat_key_pem', 'wechat_key_pem_path', 'wechat_cert_pem_path'], 'string'],
            [['wechat_app_id'], 'string', 'max' => 64],
        ]; // TODO: Change the autogenerated stub
    }


    public function attributeLabels()
    {
        return [
            'score_status' => '启用积分抵扣',
            'score_price' => '积分抵扣额度',
            'wechat_mch_id' => '微信商户ID',
            'wechat_pay_secret' => '支付key',
            'wechat_cert_pem' => 'cert证书',
            'wechat_key_pem' => 'key证书路径',
            'wechat_status' => '微信支付启用',
            'wechat_app_id' => 'Wechat App ID',
            'balance_status' => 'Balance Status',
            'pay_password_status' => '余额支付时是否启用支付密码',
            'is_income_cash' => '开启收入提现',
            'recharge' => '充值金额',
            'integral_status'=>'金豆券开启状态'
        ]; // TODO: Change the autogenerated stub
    }

    public function save()
    {
        if (!$this->validate()) {
            return $this->returnApiResultData();
        }
        if ($this->cash_type) {
            $this->cash_type = SerializeHelper::encode($this->cash_type);
        } else {
            $this->cash_type = [];
        }

        if ($this->wechat_status) {
            if ($this->wechat_cert_pem && $this->wechat_key_pem) {
                $pemDir = \Yii::$app->runtimePath . '/pem';
                make_dir($pemDir);
                $certPemFile = $pemDir . '/' . md5($this->wechat_cert_pem . \Yii::$app->mall->id) . '.pem';
                file_put_contents($certPemFile, $this->wechat_cert_pem);
                $this->wechat_cert_pem_path = $certPemFile;
                $keyPemFile = $pemDir . '/' . md5($this->wechat_key_pem . \Yii::$app->mall->id) . '.pem';
                file_put_contents($keyPemFile, $this->wechat_key_pem);
                $this->wechat_key_pem_path = $keyPemFile;
            }
            // 检测参数是否有效
            if(! $this->wechat_app_id||!$this->wechat_mch_id||!$this->wechat_pay_secret){
                return [
                    'code' => ApiCode::CODE_FAIL,
                    'msg' => '微信支付信息未完善，或关闭微信支付！'
                ];
            }

            $config = \Yii::$app->params['wechatPaymentConfig'];
            $config['app_id'] = $this->wechat_app_id;
            $config['mch_id'] = $this->wechat_mch_id;
            $config['key'] = $this->wechat_pay_secret;
            \Yii::$app->params['wechatPaymentConfig'] = $config;
            try {
                $payment = \Yii::$app->wechat->payment;
                $res = $payment->order->queryByOutTradeNumber('88888888');
                if ($res && $res['return_code'] == 'FAIL') {
                    return [
                        'code' => ApiCode::CODE_FAIL,
                        'msg' => $res['return_msg'],
                    ];
                }
            } catch (Exception $e) {
                return [
                    'code' => ApiCode::CODE_FAIL,
                    'msg' => $e->getMessage()
                ];
            }
        }
        $res = OptionLogic::set(Option::NAME_PAYMENT, $this->attributes, \Yii::$app->mall->id, Option::GROUP_APP);
        if (!$res) {
            return $this->returnApiResultData(ApiCode::CODE_FAIL, '保存失败');
        }
        return $this->returnApiResultData(ApiCode::CODE_SUCCESS, '保存成功');
    }


    public function getSetting()
    {
        $res = OptionLogic::get(Option::NAME_PAYMENT, \Yii::$app->mall->id, Option::GROUP_APP);
        if (!$res) {
            return $this->returnApiResultData(ApiCode::CODE_FAIL, '暂未添加财务配置');
        }
        if (isset($res['cash_type']) && !empty($res["cash_type"])) {
            $res['cash_type'] = SerializeHelper::decode($res['cash_type']);
        } else {
            $res['cash_type'] = [];
        }
        if ($res['cash_type'] == 'false' || $res['cash_type'] == 'true') {
            $res['cash_type'] = [];
        }

        if(isset($res["recharge"]) && !empty($res["recharge"])){
            if(!is_array($res["recharge"])){
                $res['recharge'] = SerializeHelper::decode($res['recharge']);
            }
        }else{
            $res['recharge'] = [];
        }
        return $this->returnApiResultData(ApiCode::CODE_SUCCESS, '', ['setting' => $res]);
    }
}