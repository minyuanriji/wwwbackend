<?php
/**
 * @link:http://www.gdqijianshi.com/
 * @copyright: Copyright (c) 2020 广东七件事集团
 * 分销佣金接口处理类
 * Author: zal
 * Date: 2020-05-26
 * Time: 10:30
 */

namespace app\plugins\agent\forms\api;

use app\core\ApiCode;
use app\core\BasePagination;
use app\logic\UserLogic;
use app\models\BaseModel;
use app\models\CommonOrderDetail;
use app\models\Goods;
use app\models\PriceLog;
use app\models\User;
use app\models\UserParent;
use app\plugins\agent\forms\common\Common;
use app\plugins\agent\models\Agent;
use app\plugins\agent\models\AgentLevel;
use app\plugins\agent\models\AgentPriceLogType;


class AgentForm extends BaseModel
{
    public $page;
    public $level;
    public $limit;
    //-1全部 0团队奖1平级奖2感恩奖
    public $type = -1;
    public function rules()
    {
        return [
            [['limit'], 'default', 'value' => 10],
            [['page', 'limit', 'level', 'type'], 'integer']
        ]; // TODO: Change the autogenerated stub
    }

    public function getInfo()
    {
        if (!$this->validate()) {
            return $this->returnApiResultData();
        }
        $user = User::findOne(\Yii::$app->user->identity->id);
        $common = Common::getCommon(\Yii::$app->mall);
        $returnData = $common->getAgentInfo($user);
        return $this->returnApiResultData(ApiCode::CODE_SUCCESS, null, $returnData);
    }

    public function getLogList()
    {
        if (!$this->validate()) {
            return $this->returnApiResultData();
        }
        $user = User::findOne(\Yii::$app->user->identity->id);
        if (!$user) {
            return $this->returnApiResultData(ApiCode::CODE_FAIL, '请先登录');
        }
        $query = PriceLog::find()
            ->alias('l')
            ->leftJoin(['u' => User::tableName()], 'u.id=l.child_id')
            ->leftJoin(['t' => AgentPriceLogType::tableName()], 't.price_log_id=l.id')
            ->where([
                'l.sign' => 'agent',
                'l.mall_id' => \Yii::$app->mall->id,
                'l.is_delete' => 0
            ]);
        if ($user) {
            $query->andWhere(['l.user_id' => $user->id]);
        }
        if ($this->type >= 0) {
            $query->andWhere(['t.type' => $this->type]);
        }
        $query = $query
            ->orderBy(['l.created_at' => SORT_ASC]);
        /**
         * @var BasePagination $pagination
         */
        $query = $query->page($pagination, $this->limit, $this->page);
        $list = $query->select('l.*,u.avatar_url,u.nickname,u.id as user_id')->orderBy('l.created_at DESC')->asArray()->all();
        foreach ($list as &$item) {
            $common_order_detail = CommonOrderDetail::findOne(['is_delete' => 0, 'id' => $item['common_order_detail_id']]);
            if (!$common_order_detail) {
                $item['goods_name'] = '未知商品';
                continue;
            } else {
                $item['goods_price'] = $common_order_detail->price;
                //需要加入商品类型
                $goods = Goods::findOne($common_order_detail->goods_id);
                if (!$goods) {
                    $item['goods_name'] = '未知商品';
                } else {
                    $item['goods_name'] = $goods->name;
                }
            }
            if ($item['status'] == 0) {
                $item['status'] = '待结算';
            }
            if ($item['status'] == 1) {
                $item['status'] = '已结算';
            }
            if ($item['status'] == -1) {
                $item['status'] = '无效';
            }
            $price_type = AgentPriceLogType::findOne(['price_log_id' => $item['id']]);
            if ($price_type) {
                $price_type_list = AgentPriceLogType::PRICE_TYPE;
                $item['price_type'] = $price_type_list[$price_type->type];
            } else {
                $item['price_type'] = '未知奖项';

            }
            if ($item['is_price'] == 1) {
                $item['is_price'] = '已发放';
            } else {
                $item['is_price'] = '未发放';
            }
            $item['order_no'] = $common_order_detail->order_no;
            $item['created_at'] = date('Y-m-d H:i:s', $item['created_at']);
        }
        unset($item);
        $returnData['list'] = $list;
        $returnData["pagination"] = $pagination;
        return $this->returnApiResultData(ApiCode::CODE_SUCCESS, null, $returnData);
    }
}