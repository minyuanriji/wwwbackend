<?php

namespace app\plugins\smart_shop\components;

use WeChatPay\Builder;
use WeChatPay\Crypto\Rsa;
use WeChatPay\Util\PemUtil;
use yii\base\Component;

class WechatPaySdkApi extends Component{

    public $mchid; // 商户号
    public $serial; //「商户API证书」的「证书序列号」
    public $privateKeyPath; //商户私钥证书路径
    public $wechatCertPath; //微信平台证书路径

    private $_instance; //APIv3 客户端实例

    private $_platformCertificateSerial;

    public function init(){
        parent::init(); // TODO: Change the autogenerated stub

// 商户号
        $merchantId = $this->mchid;

// 从本地文件中加载「商户API私钥」，「商户API私钥」会用来生成请求的签名
        $merchantPrivateKeyFilePath = file_get_contents($this->privateKeyPath);
        $merchantPrivateKeyInstance = Rsa::from($merchantPrivateKeyFilePath, Rsa::KEY_TYPE_PRIVATE);

// 「商户API证书」的「证书序列号」
        $merchantCertificateSerial = $this->serial;

// 从本地文件中加载「微信支付平台证书」，用来验证微信支付应答的签名
        $platformCertificateFilePath = file_get_contents($this->wechatCertPath);
        $platformPublicKeyInstance = Rsa::from($platformCertificateFilePath, Rsa::KEY_TYPE_PUBLIC);

// 从「微信支付平台证书」中获取「证书序列号」
        $this->_platformCertificateSerial = PemUtil::parseCertificateSerialNo($platformCertificateFilePath);

// 构造一个 APIv3 客户端实例
        $this->_instance = Builder::factory([
            'mchid'      => (string)$merchantId,
            'serial'     => $merchantCertificateSerial,
            'privateKey' => $merchantPrivateKeyInstance,
            'certs'      => [
                $this->_platformCertificateSerial => $platformPublicKeyInstance,
            ]
        ]);
    }

    /**
     * @return mixed
     */
    public function getInstance(){
        return $this->_instance;
    }

    public function post($api, $params = []){

        foreach($params as $key => $val){
            if(is_string($val) && substr($val, 0, 4) == "ENC:"){
                $params[$key] = $this->encrypt(substr($val, 4));
            }
        }

        $resp = $this->_instance->chain($api)->post([
            'json' => $params,
            'curl' => [CURLOPT_SSL_VERIFYPEER => false],
            'headers' => [
                'Wechatpay-Serial' => $this->_platformCertificateSerial,
                'Accept'           => 'application/json',
            ]
        ]);
        $data = @json_decode($resp->getBody(), true);
        return $data;
    }

    public function get($api, $params = []){
        $resp = $this->getInstance()->chain($api)->get(['query' => $params, 'curl' => [CURLOPT_SSL_VERIFYPEER => false]]);
        $data = @json_decode($resp->getBody(), true);
        return $data;
    }

    private function encrypt($str){
        $public_key = file_get_contents($this->wechatCertPath);
        $encrypted = '';
        if (openssl_public_encrypt($str, $encrypted, $public_key, OPENSSL_PKCS1_OAEP_PADDING)) {
            //base64编码
            $sign = base64_encode($encrypted);
        } else {
            throw new Exception('encrypt failed');
        }
        return $sign;
    }
}