<?php
/**
 * @link:http://www.gdqijianshi.com/
 * @copyright: Copyright (c) 2020 广东七件事集团
 * 分销佣金接口处理类
 * Author: zal
 * Date: 2020-05-26
 * Time: 10:30
 */

namespace app\plugins\stock\forms\api;

use app\core\ApiCode;
use app\core\BasePagination;
use app\helpers\SerializeHelper;
use app\models\BaseModel;
use app\models\CommonOrderDetail;
use app\models\Goods;
use app\models\PriceLog;
use app\models\User;
use app\models\UserParent;
use app\plugins\stock\forms\common\Common;
use app\plugins\stock\jobs\FillOrderSubmitJob;
use app\plugins\stock\models\FillOrder;
use app\plugins\stock\models\FillOrderDetail;
use app\plugins\stock\models\Stock;
use app\plugins\stock\models\StockAgent;
use app\plugins\stock\models\StockGoods;
use app\plugins\stock\models\StockLevel;
use app\plugins\stock\models\StockOrder;
use app\plugins\stock\models\StockPriceLogType;
use yii\db\Exception;


class FillOrderSubmitForm extends BaseModel
{
    public $order_detail;

    public function rules()
    {
        return [
            [['order_detail'], 'safe'],
        ]; // TODO: Change the autogenerated stub
    }

    public function save()
    {
        $agent = StockAgent::findOne(['user_id' => \Yii::$app->user->id, 'is_delete' => 0]);
        if (!$agent) {
            return $this->returnApiResultData(ApiCode::CODE_FAIL, '你不是代理商');
        }
        $order_detail_list = $this->order_detail;
        $pay_price = 0;
        foreach ($order_detail_list as $item) {
            $stock_goods = StockGoods::findOne(['goods_id' => $item['goods_id'], 'is_delete' => 0]);
            if (!$stock_goods) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '不是库存商品');
            }
            $agent_price_list = SerializeHelper::decode($stock_goods->agent_price);
            foreach ($agent_price_list as $price) {
                if ($price['level'] == $agent->level) {
                    $pay_price += $price['stock_price'] * intval($item['num']);
                }
            }
        }

        $order = new FillOrder();
        $order->mall_id = \Yii::$app->mall->id;
        $order->user_id = \Yii::$app->user->id;
        $order->pay_price = floatval($pay_price);
        $order->order_no = FillOrder::getOrderNo('F');

        if ($order->save()) {
            foreach ($order_detail_list as $item) {
                $stock_goods = StockGoods::findOne(['goods_id' => $item['goods_id'], 'is_delete' => 0]);
                if (!$stock_goods) {
                    return $this->returnApiResultData(ApiCode::CODE_FAIL, '不是库存商品');
                }
                $detail = new  FillOrderDetail();
                $detail->mall_id = $order->mall_id;
                $detail->order_id = $order->id;
                $detail->goods_id = $item['goods_id'];
                $detail->num = $item['num'];
                $detail->is_give = 0;
                $detail->sale_price = $stock_goods->origin_price;
                $agent_price_list = SerializeHelper::decode($stock_goods->agent_price);
                foreach ($agent_price_list as $price) {
                    if ($price['level'] == $agent->level) {
                        $detail->price = $price['stock_price'] * intval($item['num']);
                        break;
                    }
                }
                if ($detail->save() === false) {
                    return $this->returnApiResultData(ApiCode::CODE_FAIL, '下单失败', ['error' => $detail->getErrors()]);
                }
            }
            \Yii::$app->queue->delay(0)->push(new FillOrderSubmitJob(['mall_id' => $order->mall_id, 'order_id' => $order->id]));
        } else {
            return $this->returnApiResultData(ApiCode::CODE_FAIL, '下单失败', ['error' => $order->getErrors()]);
        }

        return $this->returnApiResultData(ApiCode::CODE_SUCCESS, '下单成功',['order_id'=>$order->id]);
    }
}