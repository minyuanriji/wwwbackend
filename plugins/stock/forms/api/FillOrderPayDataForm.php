<?php
/**
 * @link:http://www.gdqijianshi.com/
 * @copyright: Copyright (c) 2020 广东七件事集团
 * 分销佣金接口处理类
 * Author: zal
 * Date: 2020-05-26
 * Time: 10:30
 */

namespace app\plugins\stock\forms\api;

use app\core\ApiCode;
use app\models\BaseModel;
use app\models\User;
use app\models\UserInfo;
use app\plugins\stock\events\FillOrderEvent;
use app\plugins\stock\handlers\FillOrderHandler;
use app\plugins\stock\jobs\FillOrderPriceLogJob;
use app\plugins\stock\models\FillOrder;

class FillOrderPayDataForm extends BaseModel
{
    public $order_id;
    public $pay_type = 'BALANCE_PAY';

    public function rules()
    {
        return [
            [['order_id'], 'integer'],
            [['pay_type'], 'string']
        ]; // TODO: Change the autogenerated stub
    }

    public function payData()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $fillOrder = FillOrder::findOne(['id' => $this->order_id, 'is_delete' => 0, 'is_pay' => 0]);
        if (!$fillOrder) {
            return $this->returnApiResultData(ApiCode::CODE_FAIL, '订单不存在');
        }
        if ($this->pay_type == 'BALANCE_PAY') {
            $user = User::findOne($fillOrder->user_id);
            if (!$user) {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '用户不存在');
            }
            if ($user->balance >= $fillOrder->pay_price) {
                $res = \Yii::$app->currency->setUser($user)->balance->sub(
                    floatval($fillOrder->pay_price),
                    '支付拿货款'
                );
                $fillOrder->is_pay = 1;
                if ($res && $fillOrder->save()) {
                    $event = new FillOrderEvent();
                    $event->order = $fillOrder;
                    \Yii::$app->trigger(FillOrderHandler::ORDER_PAID, $event);
                    //触发补货收益任务
                    \Yii::$app->queue->delay(0)->push(new FillOrderPriceLogJob([
                        'order' => $fillOrder,
                        'mall_id' => $fillOrder->mall_id
                    ]));
                    return $this->returnApiResultData(ApiCode::CODE_SUCCESS, '支付成功');
                }
            } else {
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '支付失败，余额不足');
            }
        }
        $config = [];
        if ($this->pay_type == 'WECHAT_PAY') {
            $protocol = env('PAY_NOTIFY_PROTOCOL');
            $url = \Yii::$app->request->hostInfo . \Yii::$app->request->baseUrl . '/pay-notify/' . 'wechat-stock.php';
            if ($protocol) {
                $url = str_replace('http://', ($protocol . '://'), $url);
                $url = str_replace('https://', ($protocol . '://'), $url);
            }
            if (\Yii::$app->request->headers['x-app-platform'] == 'wechat') {
                $payment = \Yii::$app->wechat->payment;
                $userInfo = UserInfo::findOne(['user_id' => \Yii::$app->user->identity->id, 'is_delete' => 0, 'platform' => 'wechat']);
                if (!$userInfo) {
                    return $this->returnApiResultData(ApiCode::CODE_FAIL, '无法获取用户信息');
                }
                $result = $payment->order->unify([
                    'body' => '支付拿货款',
                    'out_trade_no' => $fillOrder->order_no,
                    'total_fee' => $fillOrder->pay_price * 100,
                    'notify_url' => $url, // 支付结果通知网址，如果不设置则会使用配置里的默认地址
                    'trade_type' => 'JSAPI', // 请对应换成你的支付方式对应的值类型
                    'openid' => $userInfo->openid,
                    'attach' => $fillOrder->mall_id
                ]);
                if ($result['return_code'] == 'SUCCESS' && $result['return_msg'] == 'OK' && $result['result_code'] == 'SUCCESS') {
                    $prepayId = $result['prepay_id'];
                    $config = $payment->jssdk->sdkConfig($prepayId);
                } else {
                    return $this->returnApiResultData(ApiCode::CODE_FAIL, $result['return_msg']);
                }
            }else{
                return $this->returnApiResultData(ApiCode::CODE_FAIL, '下单失败，请在微信浏览器中打开');
            }
        }
        return $this->returnApiResultData(ApiCode::CODE_SUCCESS, '下单成功', [
            'config' => $config
        ]);
    }
}